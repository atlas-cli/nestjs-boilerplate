"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatI18nErrors = exports.i18nValidationMessage = exports.i18nValidationErrorFactory = exports.getI18nContextFromArgumentsHost = exports.getI18nServiceFromRpcContext = exports.getI18nServiceFromGraphQLContext = exports.getI18nContextFromRequest = exports.shouldResolve = void 0;
const i18n_context_1 = require("../i18n.context");
const i18n_validation_error_interface_1 = require("../interfaces/i18n-validation-error.interface");
function shouldResolve(e) {
    return typeof e === 'function' || e['use'];
}
exports.shouldResolve = shouldResolve;
function getI18nContextFromRequest(req) {
    const lang = req.raw && req.raw.i18nLang ? req.raw.i18nLang : req.i18nLang;
    const service = req.raw && req.raw.i18nService ? req.raw.i18nService : req.i18nService;
    return new i18n_context_1.I18nContext(lang, service);
}
exports.getI18nContextFromRequest = getI18nContextFromRequest;
function getI18nServiceFromGraphQLContext(graphqlContext) {
    var _a, _b;
    const [, , ctx] = graphqlContext;
    return new i18n_context_1.I18nContext((_a = ctx.i18nLang) !== null && _a !== void 0 ? _a : ctx.req.i18nLang, (_b = ctx.i18nService) !== null && _b !== void 0 ? _b : ctx.req.i18nService);
}
exports.getI18nServiceFromGraphQLContext = getI18nServiceFromGraphQLContext;
function getI18nServiceFromRpcContext(rpcContext) {
    return new i18n_context_1.I18nContext(rpcContext.i18nLang, rpcContext.i18nService);
}
exports.getI18nServiceFromRpcContext = getI18nServiceFromRpcContext;
function getI18nContextFromArgumentsHost(ctx) {
    switch (ctx.getType()) {
        case 'http':
            return getI18nContextFromRequest(ctx.switchToHttp().getRequest());
        case 'graphql':
            return getI18nServiceFromGraphQLContext(ctx.getArgs());
        case 'rpc':
            return getI18nServiceFromRpcContext(ctx.switchToRpc().getContext());
        default:
            throw Error(`can't resolve i18n context for type: ${ctx.getType()} not supported yet)`);
    }
}
exports.getI18nContextFromArgumentsHost = getI18nContextFromArgumentsHost;
function validationErrorToI18n(e) {
    var _a;
    return {
        property: e.property,
        children: (_a = e === null || e === void 0 ? void 0 : e.children) === null || _a === void 0 ? void 0 : _a.map(validationErrorToI18n),
        constraints: !!e.constraints
            ? Object.keys(e.constraints).reduce((result, key) => {
                result[key] = e.constraints[key];
                return result;
            }, {})
            : {},
    };
}
function i18nValidationErrorFactory(errors) {
    return new i18n_validation_error_interface_1.I18nValidationException(errors.map((e) => {
        return validationErrorToI18n(e);
    }));
}
exports.i18nValidationErrorFactory = i18nValidationErrorFactory;
function i18nValidationMessage(key, args) {
    return (a) => {
        const { constraints } = a;
        let { value } = a;
        if (typeof value === 'string') {
            value = value.replace(/\|/g, '');
        }
        return `${key}|${JSON.stringify(Object.assign({ value, constraints }, args))}`;
    };
}
exports.i18nValidationMessage = i18nValidationMessage;
function formatI18nErrors(errors, i18n, options) {
    return errors.map((error) => {
        var _a;
        error.children = formatI18nErrors((_a = error.children) !== null && _a !== void 0 ? _a : [], i18n, options);
        error.constraints = Object.keys(error.constraints).reduce((result, key) => {
            const [translationKey, argsString] = error.constraints[key].split('|');
            const args = !!argsString ? JSON.parse(argsString) : {};
            result[key] = i18n.translate(translationKey, Object.assign(Object.assign({}, options), { args: Object.assign({ property: error.property }, args) }));
            return result;
        }, {});
        return error;
    });
}
exports.formatI18nErrors = formatI18nErrors;
//# sourceMappingURL=util.js.map
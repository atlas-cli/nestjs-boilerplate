version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
jobs:
  checkout:
    working_directory: ~/nest-boilerplate
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - checkout
      - save_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/nest-boilerplate
  dependencies:
    working_directory: ~/nest-boilerplate
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - restore_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/nest-boilerplate/node_modules
  lint:
    working_directory: ~/nest-boilerplate
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - restore_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: ESLint
          command: npm run lint
      - run:
          name: Prettier
          command: npm run format
  unit_test:
    working_directory: ~/nest-boilerplate
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - restore_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Test
          command: npm run test
  integration_test:
    working_directory: ~/nest-boilerplate
    docker:
      - image: cimg/node:16.18.1-browsers
      - image: cimg/postgres:14.6
        environment:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
    steps:
      - restore_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Copy .env
          command: cp .env.example .env
      - run:
          name: Wait for Postgres to start
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run migrations
          command: npm run migration:run
      - run:
          name: Run seeds
          command: npm run seed:run
      - run:
          name: Run start
          background: true
          command: npm run start
      - run:
          name: Integration E2E test
          command: npx wait-on http://localhost:3000 & npm run test:e2e
  build:
    working_directory: ~/nest-boilerplate
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - restore_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Build
          command: npm run build
      - save_cache:
          key: v0-build-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/nest-boilerplate/dist/app
  diff:
    working_directory: ~/nest-boilerplate
    executor: aws-cli/default
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - restore_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
      - restore_cache:
          key: v0-build-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Build infra
          command: npm run build:infra
      - run:
          name: Diff
          command: npx cdk diff --all

  deployment:
    working_directory: ~/nest-boilerplate
    executor: aws-cli/default
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - restore_cache:
          key: v0-src-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v0-node-modules-{{ .Branch }}-{{ checksum "package.json" }}
      - restore_cache:
          key: v0-build-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Build infra
          command: npm run build:infra
      - run:
          name: Deploy core changes
          command: npx cdk deploy atlas-$NODE_ENV-aurora-database --require-approval never
      - run:
          name: Deploy application changes
          command: npx cdk deploy atlas-$NODE_ENV-aurora-database --require-approval never
workflows:
  version: 2
  full-cycle:
    jobs:
      - checkout
      - dependencies:
          requires:
            - checkout
      - lint:
          requires:
            - dependencies
      - unit_test:
          requires:
            - dependencies
      - integration_test:
          requires:
            - dependencies
      - build:
          requires:
            - dependencies
      - diff:
          name: diff_to_development
          context: development
          filters:
            branches:
              only:
                - master
                - main
                - develop
          requires:
            - build
            - integration_test
            - unit_test
      - diff:
          name: diff_to_production
          context: production
          filters:
            branches:
              tags:
                only: /^v.*/
          requires:
            - build
            - integration_test
            - unit_test
      - approve_deploy_to_development:
          type: approval
          context: development
          requires:
            - diff_to_development
      - approve_deploy_to_production:
          type: approval
          context: production
          requires:
            - diff_to_production
      - deployment:
          name: deployment_to_development
          context: development
          requires:
            - approve_deploy_to_development
      - deployment:
          name: deployment_to_production
          context: production
          requires:
            - approve_deploy_to_production